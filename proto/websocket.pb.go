// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: websocket.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Websocket_MessageType int32

const (
	Websocket_ERROR Websocket_MessageType = 0
	Websocket_CHAT  Websocket_MessageType = 1
)

var Websocket_MessageType_name = map[int32]string{
	0: "ERROR",
	1: "CHAT",
}
var Websocket_MessageType_value = map[string]int32{
	"ERROR": 0,
	"CHAT":  1,
}

func (x Websocket_MessageType) String() string {
	return proto.EnumName(Websocket_MessageType_name, int32(x))
}
func (Websocket_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_websocket_f31af6e9c46a3abe, []int{0, 0}
}

type Websocket_ErrorMessage_ErrorType int32

const (
	Websocket_ErrorMessage_INVALID      Websocket_ErrorMessage_ErrorType = 0
	Websocket_ErrorMessage_UNAUTHORIZED Websocket_ErrorMessage_ErrorType = 1
	Websocket_ErrorMessage_BAD          Websocket_ErrorMessage_ErrorType = 2
)

var Websocket_ErrorMessage_ErrorType_name = map[int32]string{
	0: "INVALID",
	1: "UNAUTHORIZED",
	2: "BAD",
}
var Websocket_ErrorMessage_ErrorType_value = map[string]int32{
	"INVALID":      0,
	"UNAUTHORIZED": 1,
	"BAD":          2,
}

func (x Websocket_ErrorMessage_ErrorType) String() string {
	return proto.EnumName(Websocket_ErrorMessage_ErrorType_name, int32(x))
}
func (Websocket_ErrorMessage_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_websocket_f31af6e9c46a3abe, []int{0, 1, 0}
}

type Websocket struct {
	Type Websocket_MessageType `protobuf:"varint,1,opt,name=type,proto3,enum=websocket.Websocket_MessageType" json:"type,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Websocket_Chat
	//	*Websocket_Error
	Message isWebsocket_Message `protobuf_oneof:"message"`
}

func (m *Websocket) Reset()         { *m = Websocket{} }
func (m *Websocket) String() string { return proto.CompactTextString(m) }
func (*Websocket) ProtoMessage()    {}
func (*Websocket) Descriptor() ([]byte, []int) {
	return fileDescriptor_websocket_f31af6e9c46a3abe, []int{0}
}
func (m *Websocket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Websocket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Websocket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Websocket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Websocket.Merge(dst, src)
}
func (m *Websocket) XXX_Size() int {
	return m.Size()
}
func (m *Websocket) XXX_DiscardUnknown() {
	xxx_messageInfo_Websocket.DiscardUnknown(m)
}

var xxx_messageInfo_Websocket proto.InternalMessageInfo

type isWebsocket_Message interface {
	isWebsocket_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Websocket_Chat struct {
	Chat *Websocket_ChatMessage `protobuf:"bytes,2,opt,name=chat,oneof"`
}
type Websocket_Error struct {
	Error *Websocket_ErrorMessage `protobuf:"bytes,3,opt,name=error,oneof"`
}

func (*Websocket_Chat) isWebsocket_Message()  {}
func (*Websocket_Error) isWebsocket_Message() {}

func (m *Websocket) GetMessage() isWebsocket_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Websocket) GetType() Websocket_MessageType {
	if m != nil {
		return m.Type
	}
	return Websocket_ERROR
}

func (m *Websocket) GetChat() *Websocket_ChatMessage {
	if x, ok := m.GetMessage().(*Websocket_Chat); ok {
		return x.Chat
	}
	return nil
}

func (m *Websocket) GetError() *Websocket_ErrorMessage {
	if x, ok := m.GetMessage().(*Websocket_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Websocket) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Websocket_OneofMarshaler, _Websocket_OneofUnmarshaler, _Websocket_OneofSizer, []interface{}{
		(*Websocket_Chat)(nil),
		(*Websocket_Error)(nil),
	}
}

func _Websocket_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Websocket)
	// message
	switch x := m.Message.(type) {
	case *Websocket_Chat:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chat); err != nil {
			return err
		}
	case *Websocket_Error:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Websocket.Message has unexpected type %T", x)
	}
	return nil
}

func _Websocket_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Websocket)
	switch tag {
	case 2: // message.chat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Websocket_ChatMessage)
		err := b.DecodeMessage(msg)
		m.Message = &Websocket_Chat{msg}
		return true, err
	case 3: // message.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Websocket_ErrorMessage)
		err := b.DecodeMessage(msg)
		m.Message = &Websocket_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Websocket_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Websocket)
	// message
	switch x := m.Message.(type) {
	case *Websocket_Chat:
		s := proto.Size(x.Chat)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Websocket_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Websocket_ChatMessage struct {
	User    string           `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Time    *types.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Websocket_ChatMessage) Reset()         { *m = Websocket_ChatMessage{} }
func (m *Websocket_ChatMessage) String() string { return proto.CompactTextString(m) }
func (*Websocket_ChatMessage) ProtoMessage()    {}
func (*Websocket_ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_websocket_f31af6e9c46a3abe, []int{0, 0}
}
func (m *Websocket_ChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Websocket_ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Websocket_ChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Websocket_ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Websocket_ChatMessage.Merge(dst, src)
}
func (m *Websocket_ChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *Websocket_ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Websocket_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Websocket_ChatMessage proto.InternalMessageInfo

func (m *Websocket_ChatMessage) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Websocket_ChatMessage) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Websocket_ChatMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Websocket_ErrorMessage struct {
	Type  Websocket_ErrorMessage_ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=websocket.Websocket_ErrorMessage_ErrorType" json:"type,omitempty"`
	Error string                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Websocket_ErrorMessage) Reset()         { *m = Websocket_ErrorMessage{} }
func (m *Websocket_ErrorMessage) String() string { return proto.CompactTextString(m) }
func (*Websocket_ErrorMessage) ProtoMessage()    {}
func (*Websocket_ErrorMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_websocket_f31af6e9c46a3abe, []int{0, 1}
}
func (m *Websocket_ErrorMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Websocket_ErrorMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Websocket_ErrorMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Websocket_ErrorMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Websocket_ErrorMessage.Merge(dst, src)
}
func (m *Websocket_ErrorMessage) XXX_Size() int {
	return m.Size()
}
func (m *Websocket_ErrorMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Websocket_ErrorMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Websocket_ErrorMessage proto.InternalMessageInfo

func (m *Websocket_ErrorMessage) GetType() Websocket_ErrorMessage_ErrorType {
	if m != nil {
		return m.Type
	}
	return Websocket_ErrorMessage_INVALID
}

func (m *Websocket_ErrorMessage) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Websocket)(nil), "websocket.Websocket")
	proto.RegisterType((*Websocket_ChatMessage)(nil), "websocket.Websocket.ChatMessage")
	proto.RegisterType((*Websocket_ErrorMessage)(nil), "websocket.Websocket.ErrorMessage")
	proto.RegisterEnum("websocket.Websocket_MessageType", Websocket_MessageType_name, Websocket_MessageType_value)
	proto.RegisterEnum("websocket.Websocket_ErrorMessage_ErrorType", Websocket_ErrorMessage_ErrorType_name, Websocket_ErrorMessage_ErrorType_value)
}
func (m *Websocket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Websocket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(m.Type))
	}
	if m.Message != nil {
		nn1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Websocket_Chat) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Chat != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(m.Chat.Size()))
		n2, err := m.Chat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Websocket_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(m.Error.Size()))
		n3, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Websocket_ChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Websocket_ChatMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.Time != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(m.Time.Size()))
		n4, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Websocket_ErrorMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Websocket_ErrorMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(m.Type))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsocket(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func encodeVarintWebsocket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Websocket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovWebsocket(uint64(m.Type))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Websocket_Chat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Chat != nil {
		l = m.Chat.Size()
		n += 1 + l + sovWebsocket(uint64(l))
	}
	return n
}
func (m *Websocket_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovWebsocket(uint64(l))
	}
	return n
}
func (m *Websocket_ChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovWebsocket(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovWebsocket(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovWebsocket(uint64(l))
	}
	return n
}

func (m *Websocket_ErrorMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovWebsocket(uint64(m.Type))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovWebsocket(uint64(l))
	}
	return n
}

func sovWebsocket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWebsocket(x uint64) (n int) {
	return sovWebsocket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Websocket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsocket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Websocket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Websocket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Websocket_MessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Websocket_ChatMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Websocket_Chat{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Websocket_ErrorMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Websocket_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsocket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsocket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Websocket_ChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsocket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsocket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsocket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Websocket_ErrorMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsocket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Websocket_ErrorMessage_ErrorType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsocket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsocket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsocket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebsocket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebsocket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsocket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWebsocket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebsocket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebsocket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebsocket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebsocket   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("websocket.proto", fileDescriptor_websocket_f31af6e9c46a3abe) }

var fileDescriptor_websocket_f31af6e9c46a3abe = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0x33, 0x31, 0x3e, 0x5f, 0x6e, 0xe4, 0xbd, 0x70, 0x79, 0x8b, 0x10, 0x1e, 0xa9, 0xcd,
	0x4a, 0x28, 0x44, 0xa8, 0xa5, 0xd0, 0x55, 0x89, 0x7f, 0x40, 0xa1, 0x55, 0x18, 0x62, 0x0b, 0xee,
	0x12, 0x99, 0x6a, 0xb1, 0x92, 0x90, 0x8c, 0x14, 0xbf, 0x45, 0xd7, 0xfd, 0x44, 0x5d, 0xba, 0xec,
	0xb2, 0xe8, 0xba, 0xdf, 0xa1, 0x38, 0x31, 0x31, 0x85, 0x96, 0xee, 0x72, 0x33, 0xbf, 0x73, 0xe7,
	0x9c, 0x33, 0xf0, 0xf7, 0x91, 0x05, 0x49, 0x38, 0x99, 0x33, 0xee, 0x44, 0x71, 0xc8, 0x43, 0x54,
	0xf3, 0x1f, 0xe6, 0xd1, 0x34, 0x0c, 0xa7, 0x0f, 0xac, 0x21, 0x0e, 0x82, 0xe5, 0x5d, 0x83, 0xdf,
	0x2f, 0x58, 0xc2, 0xfd, 0x45, 0x94, 0xb2, 0xf6, 0x7b, 0x09, 0xd4, 0xdb, 0x0c, 0xc7, 0x33, 0x50,
	0xf8, 0x2a, 0x62, 0x06, 0xa9, 0x91, 0xfa, 0x9f, 0xd3, 0x9a, 0x73, 0xd8, 0x9c, 0x33, 0xce, 0x35,
	0x4b, 0x12, 0x7f, 0xca, 0xbc, 0x55, 0xc4, 0xa8, 0xa0, 0xf1, 0x1c, 0x94, 0xc9, 0xcc, 0xe7, 0x86,
	0x5c, 0x23, 0x75, 0xed, 0x1b, 0x55, 0x7b, 0xe6, 0xf3, 0xbd, 0xb2, 0x27, 0x51, 0xc1, 0xe3, 0x05,
	0x94, 0x59, 0x1c, 0x87, 0xb1, 0x51, 0x12, 0xc2, 0xe3, 0x2f, 0x85, 0xdd, 0x1d, 0x71, 0x50, 0xa6,
	0x0a, 0x73, 0x0e, 0x5a, 0x61, 0x23, 0x22, 0x28, 0xcb, 0x84, 0xc5, 0xc2, 0xb7, 0x4a, 0xc5, 0x37,
	0x3a, 0xa0, 0xec, 0xc2, 0xee, 0x5d, 0x99, 0x4e, 0xda, 0x84, 0x93, 0x35, 0xe1, 0x78, 0x59, 0x13,
	0x54, 0x70, 0x68, 0x40, 0x65, 0x91, 0xae, 0x13, 0x7e, 0x54, 0x9a, 0x8d, 0xe6, 0x33, 0x81, 0x6a,
	0xd1, 0x06, 0x5e, 0x7e, 0xaa, 0xe9, 0xe4, 0x47, 0xdf, 0xe9, 0x50, 0x68, 0xec, 0x5f, 0x96, 0x5c,
	0x16, 0x37, 0xa5, 0x83, 0xdd, 0x04, 0x35, 0x07, 0x51, 0x83, 0x4a, 0x7f, 0x70, 0xe3, 0x5e, 0xf5,
	0x3b, 0xba, 0x84, 0x3a, 0x54, 0x47, 0x03, 0x77, 0xe4, 0xf5, 0x86, 0xb4, 0x3f, 0xee, 0x76, 0x74,
	0x82, 0x15, 0x28, 0xb5, 0xdc, 0x8e, 0x2e, 0xdb, 0x36, 0x68, 0x85, 0x17, 0x41, 0x15, 0xca, 0x5d,
	0x4a, 0x87, 0x54, 0x97, 0xf0, 0x37, 0x28, 0xed, 0x9e, 0xeb, 0xe9, 0xa4, 0xa5, 0xe6, 0xd1, 0x5a,
	0xff, 0x5f, 0x36, 0x16, 0x59, 0x6f, 0x2c, 0xf2, 0xb6, 0xb1, 0xc8, 0xd3, 0xd6, 0x92, 0xd6, 0x5b,
	0x4b, 0x7a, 0xdd, 0x5a, 0xd2, 0x58, 0x8e, 0x82, 0xe0, 0x97, 0x68, 0xa7, 0xf9, 0x11, 0x00, 0x00,
	0xff, 0xff, 0x90, 0xeb, 0x6a, 0x53, 0x53, 0x02, 0x00, 0x00,
}
